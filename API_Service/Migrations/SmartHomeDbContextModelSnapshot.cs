// <auto-generated />
using System;
using API_Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace API_Service.Migrations
{
    [DbContext(typeof(SmartHomeDbContext))]
    partial class SmartHomeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("API_Service.Models.Admin", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("username");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("API_Service.Models.Chamber", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("client_email")
                        .HasColumnType("text");

                    b.HasKey("name");

                    b.HasIndex("client_email");

                    b.ToTable("chambers");
                });

            modelBuilder.Entity("API_Service.Models.Client", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("continent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("last_name1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("last_name2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("email");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("API_Service.Models.Device", b =>
                {
                    b.Property<int>("serial_number")
                        .HasColumnType("integer");

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("client_email")
                        .HasColumnType("text");

                    b.Property<string>("device_type_name")
                        .HasColumnType("text");

                    b.Property<int>("electric_usage")
                        .HasColumnType("integer");

                    b.HasKey("serial_number");

                    b.HasIndex("client_email");

                    b.HasIndex("device_type_name");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("API_Service.Models.DeviceType", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("warranty_months")
                        .HasColumnType("integer");

                    b.HasKey("name");

                    b.ToTable("device_types");
                });

            modelBuilder.Entity("API_Service.Models.DirectionClient", b =>
                {
                    b.Property<string>("direction")
                        .HasColumnType("text");

                    b.Property<string>("client_email")
                        .HasColumnType("text");

                    b.HasKey("direction");

                    b.HasIndex("client_email");

                    b.ToTable("directions_clients");
                });

            modelBuilder.Entity("API_Service.Models.Distributor", b =>
                {
                    b.Property<int>("legal_card")
                        .HasColumnType("integer");

                    b.Property<string>("continent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("legal_card");

                    b.ToTable("distributors");
                });

            modelBuilder.Entity("API_Service.Models.Order", b =>
                {
                    b.Property<int>("consecutive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("bill_number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("client_email")
                        .HasColumnType("text");

                    b.Property<int>("device_serial_number")
                        .HasColumnType("integer");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<DateTime>("purchase_date")
                        .HasColumnType("Date");

                    b.Property<string>("purchase_time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("consecutive");

                    b.HasIndex("client_email");

                    b.HasIndex("device_serial_number");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("device_distributor", b =>
                {
                    b.Property<int>("devices_serial_number")
                        .HasColumnType("integer");

                    b.Property<int>("distributors_legal_card")
                        .HasColumnType("integer");

                    b.HasKey("devices_serial_number", "distributors_legal_card");

                    b.HasIndex("distributors_legal_card");

                    b.ToTable("device_distributor");
                });

            modelBuilder.Entity("API_Service.Models.Chamber", b =>
                {
                    b.HasOne("API_Service.Models.Client", "client")
                        .WithMany("chambers")
                        .HasForeignKey("client_email");

                    b.Navigation("client");
                });

            modelBuilder.Entity("API_Service.Models.Device", b =>
                {
                    b.HasOne("API_Service.Models.Client", "client")
                        .WithMany("devices")
                        .HasForeignKey("client_email");

                    b.HasOne("API_Service.Models.DeviceType", "device_type")
                        .WithMany("devices")
                        .HasForeignKey("device_type_name");

                    b.Navigation("client");

                    b.Navigation("device_type");
                });

            modelBuilder.Entity("API_Service.Models.DirectionClient", b =>
                {
                    b.HasOne("API_Service.Models.Client", "client")
                        .WithMany("directions")
                        .HasForeignKey("client_email");

                    b.Navigation("client");
                });

            modelBuilder.Entity("API_Service.Models.Order", b =>
                {
                    b.HasOne("API_Service.Models.Client", "client")
                        .WithMany("orders")
                        .HasForeignKey("client_email");

                    b.HasOne("API_Service.Models.Device", "device")
                        .WithMany("orders")
                        .HasForeignKey("device_serial_number")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("device");
                });

            modelBuilder.Entity("device_distributor", b =>
                {
                    b.HasOne("API_Service.Models.Device", null)
                        .WithMany()
                        .HasForeignKey("devices_serial_number")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Service.Models.Distributor", null)
                        .WithMany()
                        .HasForeignKey("distributors_legal_card")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API_Service.Models.Client", b =>
                {
                    b.Navigation("chambers");

                    b.Navigation("devices");

                    b.Navigation("directions");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("API_Service.Models.Device", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("API_Service.Models.DeviceType", b =>
                {
                    b.Navigation("devices");
                });
#pragma warning restore 612, 618
        }
    }
}
